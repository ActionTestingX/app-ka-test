name: tool-gitops
on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'

jobs:
  gitopsCheck:
    runs-on: ubuntu-latest
    steps:
      #####################################################################################################################

      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source

      #####################################################################################################################

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}

      #####################################################################################################################

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml==0.10.2
          pip install ruamel.yaml==0.17.35
          pip install python-semantic-release==8.1.1

      #####################################################################################################################

      - name: Collect semantic release version number
        working-directory: ./source
        run: |
          echo "VERSION_ENV_CACHE=$(semantic-release --noop version)" >> $GITHUB_ENV

      #####################################################################################################################

      - name: No version found, overriding to 0.0.0
        if: env.VERSION_ENV_CACHE == ''
        run: |
          echo "VERSION_ENV_CACHE=0.0.0" >> $GITHUB_ENV

      #####################################################################################################################

      - name: Collect gitops config
        working-directory: ./source
        shell: python
        run: |
          import toml
          import os

          data = toml.load("semantic-release.toml")

          def set_output(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          set_output("DOCKER_IMAGE_TEAM", data["tool"]["docker"]["team_name"])
          set_output("DOCKER_IMAGE_NAME", data["tool"]["docker"]["image_name"])

          set_output("GITOPS_ENABLED", data["tool"]["gitops"]["enabled"])
          set_output("GITOPS_REPO", data["tool"]["gitops"]["repo"])
          set_output("GITOPS_FILE", data["tool"]["gitops"]["file"])
          set_output("GITOPS_KIND", data["tool"]["gitops"]["kind"])
          set_output("GITOPS_IMAGE_PATH", data["tool"]["gitops"]["image_path"])

      #####################################################################################################################

      - name: Echo DOCKER_IMAGE_TEAM & DOCKER_IMAGE_NAME - info only
        run: |
          echo ${{env.DOCKER_ENABLED}}    
          echo ${{env.DOCKER_IMAGE_TEAM}}
          echo ${{env.DOCKER_IMAGE_NAME}}
          echo ${{env.JSON_ENABLED}}    
          echo ${{env.JSON_PACKAGE}}
          echo ${{env.JSON_PACKAGE_LOCK}}
          echo ${{env.VERSION_ENV_CACHE}}

      #####################################################################################################################

      - name: Checkout gitops
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          repository: "${{ env.GITOPS_REPO }}"
          ssh-key: ${{ secrets.GITOPS_KEY }}
          path: gitops

      #####################################################################################################################

      - name: Collect gitops config
        if: env.GITOPS_ENABLED == 'true' && env.GITOPS_REPO != '' && env.GITOPS_FILE != '' && env.GITOPS_KIND != '' && env.GITOPS_IMAGE_PATH != ''
        working-directory: ./gitops
        shell: python
        run: |
          import ruamel.yaml

          yaml = ruamel.yaml.YAML()

          with open('${{ env.GITOPS_FILE }}', 'r') as file:
              code = list(yaml.load_all(file))

              for a in code:
                  if a["kind"] == "${{ env.GITOPS_KIND }}":
                      a${{ env.GITOPS_IMAGE_PATH }} = "${{ secrets.CONTAINER_REGISTRY_ACR_URL }}/${{env.DOCKER_IMAGE_TEAM}}/${{env.DOCKER_IMAGE_NAME}}:${{env.VERSION_ENV_CACHE}}"  
                      with open('${{ env.GITOPS_FILE }}', 'w') as file:
                          yaml.dump_all(code, file)
